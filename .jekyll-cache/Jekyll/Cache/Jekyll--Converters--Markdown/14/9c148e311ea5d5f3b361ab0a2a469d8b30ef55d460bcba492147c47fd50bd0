I"60<p>Nesse post mostrarei como encontrar no R o equilíbrio de Nash de um jogo simultâneo, tanto em estratégias mistas como em estratégias puras. Isso será feito
através do pacote <code class="language-plaintext highlighter-rouge">Recon</code>, criado pelo <a href="https://twitter.com/pedroocava">Pedro Cavalcante de Oliveira</a>
e colaborado por mim e por Diego Cardoso. Minha participação foi justamente
nas funções que calculam o equilíbrio de Nash.</p>

<p>O pacote <code class="language-plaintext highlighter-rouge">Recon</code> é uma tentativa de integrar o básico de economia com
programação, de maneira que os estudantes possam interagir computacionalmente
com o que estão estudando. É uma ferramenta de ensino poderosíssima que
permite aos alunos explorarem a matéria de uma maneira diferente, ao passo que
lidam com ferramentas também necessárias para o dia-a-dia do economista.</p>

<p>Você pode instalar o <code class="language-plaintext highlighter-rouge">Recon</code> diretamente via CRAN usando <code class="language-plaintext highlighter-rouge">install.packages('Recon')</code>
ou direto do Github usando <code class="language-plaintext highlighter-rouge">devtools::install_github("pedrocava/Recon")</code>. A versão
do Github estará, em geral, mais autalizada.</p>

<p>Bom, vamos aos exemplos. Primeiro Trataremos da função <code class="language-plaintext highlighter-rouge">sim_pure_nasheq()</code>, abreviação
para <em>Simultaneous Pure Nash Equilibria</em>, que irá calcular os equilíbrios de Nash puros
(ou degenerados) em jogos simultâneos. Há apenas dois argumentos para essa função:
a matriz do jogador das linhas e a matriz do jogador das colunas. O primeiro jogo
que calcularemos o equilíbrio será o dilema dos prisioneiros. Utilizaremos a versão da
imagem abaixo:</p>

<p><img src="/../images/prisioneiro.png" alt="" /></p>

<p>Se você já é familiarizado com teoria dos jogos, sabe que o equilíbrio de Nash se
dá na combinação de estratégias \(\{ \text{Confessar}, \text{Confessar} \}\).
Como que conseguiremos esse resultado no R? Primeiro, precisamos montar a
matriz dos dois jogadores. Como exemplo, veja a matriz do prisioneiro 1 (jogador
das linhas):</p>

<p><img src="/../images/matriz1pris.png" alt="" /></p>

<p>Para fazer isso, usamos o código a seguir:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pris1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">-8</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">-10</span><span class="p">,</span><span class="w"> </span><span class="m">-1</span><span class="p">),</span><span class="w"> </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>A matriz do prisioneiro 2 é semelhante:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pris2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">-8</span><span class="p">,</span><span class="w"> </span><span class="m">-10</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">-1</span><span class="p">),</span><span class="w"> </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Agora colocamos na função <code class="language-plaintext highlighter-rouge">sim_pure_nasheq()</code> os argumentos <code class="language-plaintext highlighter-rouge">pris1</code> e <code class="language-plaintext highlighter-rouge">pris2</code>,
nesta ordem:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sim_pure_nasheq</span><span class="p">(</span><span class="n">pris1</span><span class="p">,</span><span class="w"> </span><span class="n">pris2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>O output será uma lista com todos os equilíbrios, dizendo a estratégia da linha
e a estratégia da coluna, respectivamente, que correspondem ao equilíbrio.
No nosso caso, o output é <code class="language-plaintext highlighter-rouge">"1" "1"</code>, que significa que o equilíbrio se dá
no perfil de estratégias  \(\{ \text{Linha 1}, \text{Coluna 1} \}\), que é exatamente
\(\{ \text{Confessar}, \text{Confessar} \}\).</p>

<p>Antes de vermos a função <code class="language-plaintext highlighter-rouge">sim_mixed_nasheq</code>, abreviação de <em>Simultaneous Mixed Nash
Equilibria</em> (equilíbrios em estratégias mistas), vamos a mais dois exemplos:
equilíbrios múltiplos e nenhum equilíbrio. Vemos primeiro o caso em que não há
equilíbrio.</p>

<p>O jogo que veremos é cara ou coroa. O jogo é representado na forma normal da seguinte
maneira:</p>

<p><img src="/../images/caracoroa.png" alt="" /></p>

<p>E rodaremos o seguinte código:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jog1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">jog2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">-1</span><span class="p">),</span><span class="w"> </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">sim_pure_nasheq</span><span class="p">(</span><span class="n">jog1</span><span class="p">,</span><span class="w"> </span><span class="n">jog2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>E a mensagem printada é o que esperávamos: <em>There’s no pure strategies Nash Equilibrium</em>.</p>

<p>O próximo jogo é o Águia-Pomba. Sua matriz é dada abaixo.</p>

<p><img src="/../images/aguiapomba.png" alt="" /></p>

<p>O código que gerará o equilíbrio é:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ave1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">-2</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">ave2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">-2</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">byrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">sim_pure_nasheq</span><span class="p">(</span><span class="n">ave1</span><span class="p">,</span><span class="w"> </span><span class="n">ave2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>E o resultado será <code class="language-plaintext highlighter-rouge">"2" "1"</code> e <code class="language-plaintext highlighter-rouge">"1" "2"</code>, que corresponde aos perfis de estratégia
\(\{ \text{Pomba}, \text{Águia} \}\) e \(\{ \text{Águia}, \text{Pomba} \}\),
respectivamente. Temos nossos múltiplos equilíbrios.</p>

<p>O jogo Águia-Pomba é interessante para nossos propósitos, pois além de ter
dois equilíbrios em estratégias puras, possui também um equilíbrio em estratégia
mista.
Como comentado acima, vamos utilizar a função <code class="language-plaintext highlighter-rouge">sim_mixed_nasheq()</code>. Rode-a para
ver o que acontece.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sim_mixed_nasheq</span><span class="p">(</span><span class="n">ave1</span><span class="p">,</span><span class="w"> </span><span class="n">ave2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Como você deve ter visto, o perfil de estratégias aqui é \(\{ (0.5, 0.5), (0.5, 0.5)
  \}\), que
significa dizer que cada jogador joga uma estratégia com 50% de chance.</p>

<p>Antes de terminar o post, gostaria de ressaltar duas coisas. A primeira, é que
estas funções ainda estão em atualização e em breve teremos melhorias em termos
de estética e funcionalidade. A novidade principal é
a fusão dessas duas funções em apenas uma, <code class="language-plaintext highlighter-rouge">sim_nasheq()</code>, onde você poderá
especificar através de um terceiro argumento se quer procurar o equilíbrio
em estratégias puras ou mistas.</p>

<p>O segundo ponto importante, que não foi mencionado ao longo dos exemplos,
refere-se ao funcionamento das funções. Ambas as funções só resolvem jogos
de dois jogadores. No entanto, enquanto a função <code class="language-plaintext highlighter-rouge">sim_pure_nasheq()</code> resolve
qualquer matriz $n \times m$, a função <code class="language-plaintext highlighter-rouge">sim_mixed_nasheq()</code> só permite
matrizes $2 \times 2$ como input.</p>
:ET